From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrHua269 <wangxyper@163.com>
Date: Sun, 16 Apr 2023 19:30:19 +0800
Subject: [PATCH] Threading random tick


diff --git a/src/main/java/me/earthme/moka/Moka.java b/src/main/java/me/earthme/moka/Moka.java
index e520f342623fb15158615127601f1c2d28cbedaa..34daad8bac378562e219fc4861fc2b3026ff56dd 100644
--- a/src/main/java/me/earthme/moka/Moka.java
+++ b/src/main/java/me/earthme/moka/Moka.java
@@ -3,6 +3,7 @@ package me.earthme.moka;
 import me.earthme.moka.commands.EntityCountCommand;
 import me.earthme.moka.commands.WorkerCommand;
 import me.earthme.moka.server.ServerEntityTickHook;
+import me.earthme.moka.server.ServerChunkTickHook;
 import me.earthme.moka.workers.WorkerThreadPoolManager;
 import net.minecraft.server.MinecraftServer;
 
@@ -12,6 +13,7 @@ public class Moka {
     public static void initAll(){
         MokaConfig.init();
         ServerEntityTickHook.init();
+        ServerChunkTickHook.initWorker();
         MinecraftServer.getServer().server.getCommandMap().register("workers","moka",new WorkerCommand());
         MinecraftServer.getServer().server.getCommandMap().register("entitycount","moka",new EntityCountCommand());
     }
diff --git a/src/main/java/me/earthme/moka/server/ServerChunkTickHook.java b/src/main/java/me/earthme/moka/server/ServerChunkTickHook.java
new file mode 100644
index 0000000000000000000000000000000000000000..210c43bda0121b6a4036c7c87cebc8b2e85bfcda
--- /dev/null
+++ b/src/main/java/me/earthme/moka/server/ServerChunkTickHook.java
@@ -0,0 +1,204 @@
+package me.earthme.moka.server;
+
+import me.earthme.moka.Moka;
+import me.earthme.moka.MokaConfig;
+import me.earthme.moka.concurrent.WorkStealingThreadPool;
+import me.earthme.moka.concurrent.WorkerThreadFactory;
+import me.earthme.moka.concurrent.WorkerThreadPool;
+import me.earthme.moka.concurrent.threadfactory.DefaultWorkerFactory;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.DifficultyInstance;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.LightningBolt;
+import net.minecraft.world.entity.animal.horse.SkeletonHorse;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.SnowLayerBlock;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.LevelChunkSection;
+import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.phys.Vec3;
+
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.locks.LockSupport;
+
+public class ServerChunkTickHook {
+    private static WorkerThreadPool worker;
+    private static WorkerThreadFactory factory;
+    private static final AtomicInteger activeTasks = new AtomicInteger();
+    private static boolean enabled = false;
+
+    public static void initWorker(){
+        boolean enabledParaWorld = MokaConfig.getBoolean("optimizations.enable_parallel_random_tick", true);
+        if (enabledParaWorld){
+            factory = new DefaultWorkerFactory("randomTicks");
+            worker = new WorkStealingThreadPool(
+                    MokaConfig.getInt("optimizations.random_ticks_worker_count",Runtime.getRuntime().availableProcessors()),
+                    factory
+            );
+            Moka.getWorkerManager().addWorker("randomTick",worker);
+        }
+        enabled = enabledParaWorld;
+    }
+
+    public static void callChunkTick(LevelChunk chunk, int randomTickSpeed, ServerLevel level, BlockPos.MutableBlockPos pos){
+        if (!enabled){
+            tickChunk(level,chunk,randomTickSpeed,pos);
+            return;
+        }
+
+        activeTasks.getAndIncrement();
+        worker.postTask(()->{
+            try {
+                tickChunk(level,chunk,randomTickSpeed,pos);
+            }finally {
+                activeTasks.getAndDecrement();
+            }
+        });
+    }
+
+    public static void tickChunk(ServerLevel level, LevelChunk chunk, int randomTickSpeed, BlockPos.MutableBlockPos blockposition) {
+        ChunkPos chunkcoordintpair = chunk.getPos();
+        boolean flag = level.isRaining();
+        int j = chunkcoordintpair.getMinBlockX();
+        int k = chunkcoordintpair.getMinBlockZ();
+        //ProfilerFiller gameprofilerfiller = level.getProfiler(); // Purpur
+
+        //gameprofilerfiller.push("thunder"); // Purpur
+        if (!level.paperConfig().environment.disableThunder && flag && level.isThundering() && level.spigotConfig.thunderChance > 0 && /*level.random.nextInt(level.spigotConfig.thunderChance) == 0 &&*/ chunk.shouldDoLightning(level.random)) { // Spigot // Paper - disable thunder // Pufferfish - replace random with shouldDoLightning
+            blockposition.set(level.findLightningTargetAround(level.getBlockRandomPos(j, 0, k, 15))); // Paper
+            if (level.isRainingAt(blockposition)) {
+                DifficultyInstance difficultydamagescaler = level.getCurrentDifficultyAt(blockposition);
+                boolean flag1 = level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && level.random.nextDouble() < (double) difficultydamagescaler.getEffectiveDifficulty() * level.paperConfig().entities.spawning.skeletonHorseThunderSpawnChance.or(0.01D) && !level.getBlockState(blockposition.below()).is(Blocks.LIGHTNING_ROD); // Paper
+
+                if (flag1) {
+                    // Purpur start
+                    net.minecraft.world.entity.animal.horse.AbstractHorse entityhorseskeleton;
+                    if (level.purpurConfig.zombieHorseSpawnChance > 0D && level.random.nextDouble() <= level.purpurConfig.zombieHorseSpawnChance) {
+                        entityhorseskeleton = EntityType.ZOMBIE_HORSE.create(level);
+                    } else {
+                        entityhorseskeleton = EntityType.SKELETON_HORSE.create(level);
+                        if (entityhorseskeleton != null) ((SkeletonHorse) entityhorseskeleton).setTrap(true);
+                    }
+                    // Purpur end
+
+                    if (entityhorseskeleton != null) {
+                        //entityhorseskeleton.setTrap(true); // Purpur - moved up
+                        entityhorseskeleton.setAge(0);
+                        entityhorseskeleton.setPos((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+                        level.addFreshEntity(entityhorseskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
+                    }
+                }
+
+                LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(level);
+
+                if (entitylightning != null) {
+                    entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition));
+                    entitylightning.setVisualOnly(flag1);
+                    level.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.WEATHER); // CraftBukkit
+                }
+            }
+        }
+
+        //gameprofilerfiller.popPush("iceandsnow"); // Purpur
+        int l;
+
+        if (!level.paperConfig().environment.disableIceAndSnow && (level.currentIceAndSnowTick++ & 15) == 0) { // Paper - Disable ice and snow // Paper - optimise random ticking  // Pufferfish - optimize further random ticking
+            // Paper start - optimise chunk ticking
+            level.getRandomBlockPosition(j, 0, k, 15, blockposition);
+            int normalY = chunk.getHeight(Heightmap.Types.MOTION_BLOCKING, blockposition.getX() & 15, blockposition.getZ() & 15) + 1;
+            int downY = normalY - 1;
+            blockposition.setY(normalY);
+            // Paper end
+            Biome biomebase = (Biome) level.getBiome(blockposition).value();
+
+            // Paper start - optimise chunk ticking
+            blockposition.setY(downY);
+            if (biomebase.shouldFreeze(level, blockposition)) {
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(level, blockposition, Blocks.ICE.defaultBlockState(), null); // CraftBukkit
+                // Paper end
+            }
+
+            if (flag) {
+                int i1 = level.getGameRules().getInt(GameRules.RULE_SNOW_ACCUMULATION_HEIGHT);
+
+                blockposition.setY(normalY); // Paper
+                if (i1 > 0 && biomebase.shouldSnow(level, blockposition)) {
+                    BlockState iblockdata = level.getBlockState(blockposition);
+
+                    if (iblockdata.is(Blocks.SNOW)) {
+                        l = (Integer) iblockdata.getValue(SnowLayerBlock.LAYERS);
+                        if (l < Math.min(i1, 8)) {
+                            BlockState iblockdata1 = (BlockState) iblockdata.setValue(SnowLayerBlock.LAYERS, l + 1);
+
+                            Block.pushEntitiesUp(iblockdata, iblockdata1, level, blockposition);
+                            org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(level, blockposition, iblockdata1, null); // CraftBukkit
+                        }
+                    } else {
+                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(level, blockposition, Blocks.SNOW.defaultBlockState(), null); // CraftBukkit
+                    }
+                }
+                blockposition.setY(downY); // Paper
+
+                Biome.Precipitation biomebase_precipitation = biomebase.getPrecipitationAt(blockposition); // Paper
+
+                if (biomebase_precipitation != Biome.Precipitation.NONE) {
+                    BlockState iblockdata2 = level.getBlockState(blockposition); // Paper
+
+                    iblockdata2.getBlock().handlePrecipitation(iblockdata2, level, blockposition, biomebase_precipitation); // Paper
+                }
+            }
+        }
+
+        // Paper start - optimise random block ticking
+        //gameprofilerfiller.popPush("randomTick"); // Purpur
+        //timings.chunkTicksBlocks.startTiming(); // Paper // Purpur
+        if (randomTickSpeed > 0) {
+            LevelChunkSection[] sections = chunk.getSections();
+            int minSection = io.papermc.paper.util.WorldUtil.getMinSection(level);
+            for (int sectionIndex = 0; sectionIndex < sections.length; ++sectionIndex) {
+                LevelChunkSection section = sections[sectionIndex];
+                if (section == null || section.tickingList.size() == 0) {
+                    continue;
+                }
+
+                int yPos = (sectionIndex + minSection) << 4;
+                for (int a = 0; a < randomTickSpeed; ++a) {
+                    int tickingBlocks = section.tickingList.size();
+                    int index = level.randomTickRandom.nextInt(16 * 16 * 16);
+                    if (index >= tickingBlocks) {
+                        continue;
+                    }
+
+                    long raw = section.tickingList.getRaw(index);
+                    int location = com.destroystokyo.paper.util.maplist.IBlockDataList.getLocationFromRaw(raw);
+                    int randomX = location & 15;
+                    int randomY = ((location >>> (4 + 4)) & 255) | yPos;
+                    int randomZ = (location >>> 4) & 15;
+
+                    BlockPos blockposition2 = blockposition.set(j + randomX, randomY, k + randomZ);
+                    BlockState iblockdata = com.destroystokyo.paper.util.maplist.IBlockDataList.getBlockDataFromRaw(raw);
+
+                    iblockdata.randomTick(level, blockposition2,level.randomTickRandom);
+                    // We drop the fluid tick since LAVA is ALREADY TICKED by the above method (See LiquidBlock).
+                    // TODO CHECK ON UPDATE (ping the Canadian)
+                }
+            }
+        }
+        // Paper end - optimise random block ticking
+        //timings.chunkTicksBlocks.stopTiming(); // Paper // Purpur
+        //gameprofilerfiller.pop(); // Purpur
+    }
+
+    public static void awaitTasks(){
+        while (activeTasks.get() > 0){
+            LockSupport.parkNanos("Await world ticking",1000000);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index f35fb0f83e7316720e7620a97f0267c9f6592143..35b8c4837da1ae1615d0f72c74043db1f5bdce48 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -727,33 +727,35 @@ public class ServerChunkCache extends ChunkSource {
 
             int chunksTicked = 0; // Paper
             try {
-            while (iterator1.hasNext()) {
-                LevelChunk chunk1 = iterator1.next();
-                ChunkHolder holder = chunk1.playerChunk;
-                if (holder != null) {
-                    // Paper - move down
-                // Paper end - optimise chunk tick iteration
-                ChunkPos chunkcoordintpair = chunk1.getPos();
-
-                if ((true || this.level.isNaturalSpawningAllowed(chunkcoordintpair)) && this.chunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, false)) { // Paper - optimise anyPlayerCloseEnoughForSpawning // Paper - the chunk is known ticking
-                    chunk1.incrementInhabitedTime(j);
-                    if (flag2 && (!gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning || _pufferfish_spawnCountsReady.get()) && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair) && this.chunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, true)) { // Spigot // Paper - optimise anyPlayerCloseEnoughForSpawning & optimise chunk tick iteration
-                        NaturalSpawner.spawnForChunk(this.level, chunk1, lastSpawnState, this.spawnFriendlies, this.spawnEnemies, flag1); // Pufferfish
-                    }
-
-                    if (true || this.level.shouldTickBlocksAt(chunkcoordintpair.toLong())) { // Paper - the chunk is known ticking
-                        this.level.tickChunk(chunk1, k);
-                        if ((chunksTicked++ & 1) == 0) net.minecraft.server.MinecraftServer.getServer().executeMidTickTasks(); // Paper
+                while (iterator1.hasNext()) {
+                    LevelChunk chunk1 = iterator1.next();
+                    ChunkHolder holder = chunk1.playerChunk;
+                    if (holder != null) {
+                        // Paper - move down
+                        // Paper end - optimise chunk tick iteration
+                        ChunkPos chunkcoordintpair = chunk1.getPos();
+
+                        if ((true || this.level.isNaturalSpawningAllowed(chunkcoordintpair)) && this.chunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, false)) { // Paper - optimise anyPlayerCloseEnoughForSpawning // Paper - the chunk is known ticking
+                            chunk1.incrementInhabitedTime(j);
+                            if (flag2 && (!gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning || _pufferfish_spawnCountsReady.get()) && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair) && this.chunkMap.anyPlayerCloseEnoughForSpawning(holder, chunkcoordintpair, true)) { // Spigot // Paper - optimise anyPlayerCloseEnoughForSpawning & optimise chunk tick iteration
+                                NaturalSpawner.spawnForChunk(this.level, chunk1, lastSpawnState, this.spawnFriendlies, this.spawnEnemies, flag1); // Pufferfish
+                            }
+
+                            if (true || this.level.shouldTickBlocksAt(chunkcoordintpair.toLong())) { // Paper - the chunk is known ticking
+                                this.level.tickChunk(chunk1, k);
+                                if ((chunksTicked++ & 1) == 0)
+                                    net.minecraft.server.MinecraftServer.getServer().executeMidTickTasks(); // Paper
+                            }
+                        }
+                        // Paper start - optimise chunk tick iteration
                     }
                 }
-                // Paper start - optimise chunk tick iteration
-                }
-            }
 
-            } finally {
+            }finally {
                 if (iterator1 instanceof io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet.Iterator safeIterator) {
                     safeIterator.finishedIterating();
                 }
+                ServerChunkTickHook.awaitTasks();
             }
             // Paper end - optimise chunk tick iteration
             //this.level.timings.chunkTicks.stopTiming(); // Paper // Purpur
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 221a7abfece8603223371070ef2b12a16eda0de9..466e7589c3a2fa87f8d2056206d8439ede07853c 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1,6 +1,7 @@
 package net.minecraft.server.level;
 
 import co.aikar.timings.TimingHistory;
+import me.earthme.moka.server.ServerChunkTickHook;
 import me.earthme.moka.server.ServerEntityTickHook;
 import com.google.common.annotations.VisibleForTesting;
 import me.earthme.moka.concurrent.thread.Worker;
@@ -19,8 +20,7 @@ import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
-import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.util.concurrent.ConcurrentLinkedDeque;
@@ -40,14 +40,12 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+
 import net.minecraft.CrashReport;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -59,7 +57,6 @@ import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.network.chat.Component;
-import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockEventPacket;
@@ -73,7 +70,6 @@ import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.resources.ResourceKey;
-import io.papermc.paper.util.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerScoreboard;
 import net.minecraft.server.level.progress.ChunkProgressListener;
@@ -81,12 +77,7 @@ import net.minecraft.server.players.SleepStatus;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.TagKey;
-import net.minecraft.util.AbortableIterationConsumer;
-import net.minecraft.util.CsvOutput;
-import net.minecraft.util.Mth;
-import net.minecraft.util.ProgressListener;
-import net.minecraft.util.Unit;
-import net.minecraft.util.profiling.ProfilerFiller;
+import net.minecraft.util.*;
 import net.minecraft.util.valueproviders.IntProvider;
 import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.DifficultyInstance;
@@ -140,12 +131,10 @@ import net.minecraft.world.level.chunk.storage.EntityStorage;
 import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
-import net.minecraft.world.level.entity.EntityPersistentStorage;
 import net.minecraft.world.level.entity.EntityTickList;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelCallback;
 import net.minecraft.world.level.entity.LevelEntityGetter;
-import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.gameevent.GameEventDispatcher;
@@ -176,15 +165,13 @@ import org.bukkit.Location;
 import org.bukkit.WeatherType;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.generator.CustomWorldChunkManager;
-import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.WorldUUID;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.server.MapInitializeEvent;
 import org.bukkit.event.weather.LightningStrikeEvent;
-import org.bukkit.event.world.GenericGameEvent;
 import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
-import it.unimi.dsi.fastutil.ints.IntArrayList; // Paper
+
 
 public class ServerLevel extends Level implements WorldGenLevel {
 
@@ -805,146 +792,20 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
     // Paper start - optimise random block ticking
     private final BlockPos.MutableBlockPos chunkTickMutablePosition = new BlockPos.MutableBlockPos();
-    private final io.papermc.paper.util.math.ThreadUnsafeRandom randomTickRandom = new io.papermc.paper.util.math.ThreadUnsafeRandom(this.random.nextLong()); public net.minecraft.util.RandomSource getThreadUnsafeRandom() { return this.randomTickRandom; } // Pufferfish - moved to super // Purpur - dont break ABI
+    public final RandomSource randomTickRandom = RandomSource.create(this.random.nextLong());
+    public net.minecraft.util.RandomSource getThreadUnsafeRandom() { return this.randomTickRandom; } // Pufferfish - moved to super // Purpur - dont break ABI
     // Paper end
 
-    private int currentIceAndSnowTick = 0; protected void resetIceAndSnowTick() { this.currentIceAndSnowTick = this.randomTickRandom.nextInt(16); } // Pufferfish
+    public int currentIceAndSnowTick = 0; protected void resetIceAndSnowTick() { this.currentIceAndSnowTick = this.randomTickRandom.nextInt(16); } // Pufferfish
 
     public void tickChunk(LevelChunk chunk, int randomTickSpeed) {
-        ChunkPos chunkcoordintpair = chunk.getPos();
-        boolean flag = this.isRaining();
-        int j = chunkcoordintpair.getMinBlockX();
-        int k = chunkcoordintpair.getMinBlockZ();
-        //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
-
-        //gameprofilerfiller.push("thunder"); // Purpur
-        final BlockPos.MutableBlockPos blockposition = this.chunkTickMutablePosition; // Paper - use mutable to reduce allocation rate, final to force compile fail on change
-
-        if (!this.paperConfig().environment.disableThunder && flag && this.isThundering() && this.spigotConfig.thunderChance > 0 && /*this.random.nextInt(this.spigotConfig.thunderChance) == 0 &&*/ chunk.shouldDoLightning(this.random)) { // Spigot // Paper - disable thunder // Pufferfish - replace random with shouldDoLightning
-            blockposition.set(this.findLightningTargetAround(this.getBlockRandomPos(j, 0, k, 15))); // Paper
-            if (this.isRainingAt(blockposition)) {
-                DifficultyInstance difficultydamagescaler = this.getCurrentDifficultyAt(blockposition);
-                boolean flag1 = this.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && this.random.nextDouble() < (double) difficultydamagescaler.getEffectiveDifficulty() * this.paperConfig().entities.spawning.skeletonHorseThunderSpawnChance.or(0.01D) && !this.getBlockState(blockposition.below()).is(Blocks.LIGHTNING_ROD); // Paper
-
-                if (flag1) {
-                    // Purpur start
-                    net.minecraft.world.entity.animal.horse.AbstractHorse entityhorseskeleton;
-                    if (purpurConfig.zombieHorseSpawnChance > 0D && random.nextDouble() <= purpurConfig.zombieHorseSpawnChance) {
-                        entityhorseskeleton = EntityType.ZOMBIE_HORSE.create(this);
-                    } else {
-                        entityhorseskeleton = EntityType.SKELETON_HORSE.create(this);
-                        if (entityhorseskeleton != null) ((SkeletonHorse) entityhorseskeleton).setTrap(true);
-                    }
-                    // Purpur end
-
-                    if (entityhorseskeleton != null) {
-                        //entityhorseskeleton.setTrap(true); // Purpur - moved up
-                        entityhorseskeleton.setAge(0);
-                        entityhorseskeleton.setPos((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
-                        this.addFreshEntity(entityhorseskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
-                    }
-                }
-
-                LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(this);
-
-                if (entitylightning != null) {
-                    entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition));
-                    entitylightning.setVisualOnly(flag1);
-                    this.strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.WEATHER); // CraftBukkit
-                }
-            }
-        }
-
-        //gameprofilerfiller.popPush("iceandsnow"); // Purpur
-        int l;
-
-        if (!this.paperConfig().environment.disableIceAndSnow && (this.currentIceAndSnowTick++ & 15) == 0) { // Paper - Disable ice and snow // Paper - optimise random ticking  // Pufferfish - optimize further random ticking
-            // Paper start - optimise chunk ticking
-            this.getRandomBlockPosition(j, 0, k, 15, blockposition);
-            int normalY = chunk.getHeight(Heightmap.Types.MOTION_BLOCKING, blockposition.getX() & 15, blockposition.getZ() & 15) + 1;
-            int downY = normalY - 1;
-            blockposition.setY(normalY);
-            // Paper end
-            Biome biomebase = (Biome) this.getBiome(blockposition).value();
-
-            // Paper start - optimise chunk ticking
-            blockposition.setY(downY);
-            if (biomebase.shouldFreeze(this, blockposition)) {
-                org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition, Blocks.ICE.defaultBlockState(), null); // CraftBukkit
-                // Paper end
-            }
-
-            if (flag) {
-                int i1 = this.getGameRules().getInt(GameRules.RULE_SNOW_ACCUMULATION_HEIGHT);
-
-                blockposition.setY(normalY); // Paper
-                if (i1 > 0 && biomebase.shouldSnow(this, blockposition)) {
-                    BlockState iblockdata = this.getBlockState(blockposition);
-
-                    if (iblockdata.is(Blocks.SNOW)) {
-                        l = (Integer) iblockdata.getValue(SnowLayerBlock.LAYERS);
-                        if (l < Math.min(i1, 8)) {
-                            BlockState iblockdata1 = (BlockState) iblockdata.setValue(SnowLayerBlock.LAYERS, l + 1);
-
-                            Block.pushEntitiesUp(iblockdata, iblockdata1, this, blockposition);
-                            org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition, iblockdata1, null); // CraftBukkit
-                        }
-                    } else {
-                        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this, blockposition, Blocks.SNOW.defaultBlockState(), null); // CraftBukkit
-                    }
-                }
-                blockposition.setY(downY); // Paper
-
-                Biome.Precipitation biomebase_precipitation = biomebase.getPrecipitationAt(blockposition); // Paper
-
-                if (biomebase_precipitation != Biome.Precipitation.NONE) {
-                    BlockState iblockdata2 = this.getBlockState(blockposition); // Paper
-
-                    iblockdata2.getBlock().handlePrecipitation(iblockdata2, this, blockposition, biomebase_precipitation); // Paper
-                }
-            }
-        }
-
-        // Paper start - optimise random block ticking
-        //gameprofilerfiller.popPush("randomTick"); // Purpur
-        //timings.chunkTicksBlocks.startTiming(); // Paper // Purpur
-        if (randomTickSpeed > 0) {
-            LevelChunkSection[] sections = chunk.getSections();
-            int minSection = io.papermc.paper.util.WorldUtil.getMinSection(this);
-            for (int sectionIndex = 0; sectionIndex < sections.length; ++sectionIndex) {
-                LevelChunkSection section = sections[sectionIndex];
-                if (section == null || section.tickingList.size() == 0) {
-                    continue;
-                }
-
-                int yPos = (sectionIndex + minSection) << 4;
-                for (int a = 0; a < randomTickSpeed; ++a) {
-                    int tickingBlocks = section.tickingList.size();
-                    int index = this.randomTickRandom.nextInt(16 * 16 * 16);
-                    if (index >= tickingBlocks) {
-                        continue;
-                    }
+        final BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos(this.chunkTickMutablePosition.getX(),this.chunkTickMutablePosition.getY(),this.chunkTickMutablePosition.getZ()); // Paper - use mutable to reduce allocation rate, final to force compile fail on change
 
-                    long raw = section.tickingList.getRaw(index);
-                    int location = com.destroystokyo.paper.util.maplist.IBlockDataList.getLocationFromRaw(raw);
-                    int randomX = location & 15;
-                    int randomY = ((location >>> (4 + 4)) & 255) | yPos;
-                    int randomZ = (location >>> 4) & 15;
-
-                    BlockPos blockposition2 = blockposition.set(j + randomX, randomY, k + randomZ);
-                    BlockState iblockdata = com.destroystokyo.paper.util.maplist.IBlockDataList.getBlockDataFromRaw(raw);
-
-                    iblockdata.randomTick(this, blockposition2, this.randomTickRandom);
-                    // We drop the fluid tick since LAVA is ALREADY TICKED by the above method (See LiquidBlock).
-                    // TODO CHECK ON UPDATE (ping the Canadian)
-                }
-            }
-        }
-        // Paper end - optimise random block ticking
-        //timings.chunkTicksBlocks.stopTiming(); // Paper // Purpur
-        //gameprofilerfiller.pop(); // Purpur
+        ServerChunkTickHook.callChunkTick(chunk,randomTickSpeed,this,blockposition);
     }
 
+    private final Object randomBlockPosLock = new Object();
+
     public Optional<BlockPos> findLightningRod(BlockPos pos) {
         Optional<BlockPos> optional = this.getPoiManager().findClosest((holder) -> {
             return holder.is(PoiTypes.LIGHTNING_ROD);
@@ -957,7 +818,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         });
     }
 
-    protected BlockPos findLightningTargetAround(BlockPos pos) {
+    public BlockPos findLightningTargetAround(BlockPos pos) {
         // Paper start
         return this.findLightningTargetAround(pos, false);
     }
