From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: wangxyper <wangxyper@163.com>
Date: Sat, 8 Apr 2023 21:57:09 +0800
Subject: [PATCH] KioCG-Optimize-entity-behavior


diff --git a/src/main/java/net/minecraft/world/entity/PathfinderMob.java b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
index a53466a84973f5e83afc71245b317ab4296e0f9e..d7bb42c9a3cbcbe627b8f72162bc1eabd09fa488 100644
--- a/src/main/java/net/minecraft/world/entity/PathfinderMob.java
+++ b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
@@ -86,7 +86,7 @@ public abstract class PathfinderMob extends Mob {
     }
 
     protected boolean shouldStayCloseToLeashHolder() {
-        return true;
+        return false; // KioCG - 临时修复https://github.com/PaperMC/Paper/issues/8587
     }
 
     protected double followLeashSpeed() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index fe08d83a49efe5e1648cafc50e9184dbd0db2115..6fa55eb7f305eb17b14117ce0118749483289800 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -161,7 +161,14 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         this.goalSelector.addGoal(8, new LeapAtTargetGoal(this, 0.3F));
         this.goalSelector.addGoal(9, new OcelotAttackGoal(this));
         this.goalSelector.addGoal(10, new BreedGoal(this, 0.8D));
-        this.goalSelector.addGoal(11, new WaterAvoidingRandomStrollGoal(this, 0.8D, 1.0000001E-5F));
+        // KioCG start
+        this.goalSelector.addGoal(11, new WaterAvoidingRandomStrollGoal(this, 0.8D, 1.0000001E-5F) {
+            @Override
+            public boolean canUse() {
+                return (!((TamableAnimal) this.mob).isOrderedToSit() || this.mob.isInWaterOrBubble()) && super.canUse();
+            }
+        });
+        // KioCG end
         this.goalSelector.addGoal(12, new LookAtPlayerGoal(this, Player.class, 10.0F));
         this.targetSelector.addGoal(1, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, new NonTameRandomTargetGoal<>(this, Rabbit.class, false, (Predicate) null));
@@ -558,7 +565,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
 
         @Override
         public boolean canUse() {
-            return super.canUse() && !this.cat.isTame();
+            return !this.cat.isTame() && super.canUse(); // KioCG - 优化判断顺序
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index 8ca75f748ac7dcf872b5677648ba384992242a07..5ec9adbe55f5ba279512edecc5bb668127d21176 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -237,9 +237,23 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         this.goalSelector.addGoal(1, new LookAtPlayerGoal(this, Player.class, 8.0F));
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
         this.goalSelector.addGoal(2, new FollowOwnerGoal(this, 1.0D, 5.0F, 1.0F, true));
-        this.goalSelector.addGoal(2, new Parrot.ParrotWanderGoal(this, 1.0D));
+        // KioCG start
+        this.goalSelector.addGoal(2, new Parrot.ParrotWanderGoal(this, 1.0D) {
+            @Override
+            public boolean canUse() {
+                return (!((net.minecraft.world.entity.TamableAnimal) this.mob).isOrderedToSit() || this.mob.isInWaterOrBubble()) && super.canUse();
+            }
+        });
+        // KioCG end
         this.goalSelector.addGoal(3, new LandOnOwnersShoulderGoal(this));
-        this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0D, 3.0F, 7.0F));
+        // KioCG start
+        this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0D, 3.0F, 7.0F) {
+            @Override
+            public boolean canUse() {
+                return !((net.minecraft.world.entity.TamableAnimal) this.mob).isOrderedToSit() && super.canUse();
+            }
+        });
+        // KioCG end
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index e0ca657b0aea52ab6a91c256c1bfad1e5028f6e0..c4f0aa6e7966c031eb4aefea8a84f3bd83fa1a8c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -231,7 +231,14 @@ public class Wolf extends TamableAnimal implements NeutralMob {
         this.goalSelector.addGoal(5, new MeleeAttackGoal(this, 1.0D, true));
         this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0D, 10.0F, 2.0F, false));
         this.goalSelector.addGoal(7, new BreedGoal(this, 1.0D));
-        this.goalSelector.addGoal(8, new WaterAvoidingRandomStrollGoal(this, 1.0D));
+        // KioCG start
+        this.goalSelector.addGoal(8, new WaterAvoidingRandomStrollGoal(this, 1.0D) {
+            @Override
+            public boolean canUse() {
+                return (!((TamableAnimal) this.mob).isOrderedToSit() || this.mob.isInWaterOrBubble()) && super.canUse();
+            }
+        });
+        // KioCG end
         this.goalSelector.addGoal(9, new BegGoal(this, 8.0F));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Player.class, 8.0F));
         this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));
@@ -239,10 +246,24 @@ public class Wolf extends TamableAnimal implements NeutralMob {
         this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));
         this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));
         this.targetSelector.addGoal(3, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers());
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
+        // KioCG start
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt) {
+            @Override
+            public boolean canUse() {
+                return !((TamableAnimal) this.mob).isOrderedToSit() && super.canUse();
+            }
+        });
+        // KioCG end
         // this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, Wolf.PREY_SELECTOR)); // Purpur - moved to updatePathfinders()
         this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
-        this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<>(this, AbstractSkeleton.class, false));
+        // KioCG start
+        this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<>(this, AbstractSkeleton.class, false) {
+            @Override
+            public boolean canUse() {
+                return !((TamableAnimal) this.mob).isOrderedToSit() && super.canUse();
+            }
+        });
+        // KioCG end
         this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<>(this, true));
     }
 
@@ -729,7 +750,8 @@ public class Wolf extends TamableAnimal implements NeutralMob {
 
         @Override
         public boolean canUse() {
-            return super.canUse() && this.toAvoid instanceof Llama ? !this.wolf.isTame() && this.avoidLlama((Llama) this.toAvoid) : false;
+            if (this.wolf.isOrderedToSit()) return false; // KioCG
+            return !this.wolf.isTame() && super.canUse() && this.toAvoid instanceof Llama && this.avoidLlama((Llama) this.toAvoid); // KioCG - 优化判断顺序
         }
 
         private boolean avoidLlama(Llama llama) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
index 9c8713ef3aeb2ff203bd0328d15d80c2d78d09e9..5c4c6cb5168fd82c96ec517afddf880f489bacd0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
@@ -82,7 +82,7 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
         this.targetSelector.addGoal(1, new HurtByTargetGoal(this, new Class[0]));
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        // this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR)); // KioCG - 优化实体行为
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index a6980d85455234d4f89ff423e013f3c479bd3fe8..d46788a1f76721e44b8a73dcfbcf8f4957246113 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -147,7 +147,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
         // Purpur end
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Axolotl.class, true, false));
-        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        // this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR)); // KioCG - 优化实体行为
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 36d37e544e342e1bc584374580dbb5c883523204..948af88299ee3fbe671f3316d3d19d9a441914f4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -163,7 +163,7 @@ public class Zombie extends Monster {
 
     protected void addBehaviourGoals() {
         this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0D, false));
-        this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0D, true, 4, this::canBreakDoors));
+        // this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0D, true, 4, this::canBreakDoors)); // KioCG - 优化实体行为
         this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
         this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers(ZombifiedPiglin.class));
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
@@ -181,7 +181,7 @@ public class Zombie extends Monster {
         });
         // Purpur end
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+        // this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR)); // KioCG - 优化实体行为
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index e2e54e3a50955dac914b3082bb94e95eebd709d2..308a63aa2e05be33ec806a1385b095fe012fe727 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -116,6 +116,8 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
             return level.purpurConfig.milkClearsBeneficialEffects && canDrinkMilk && this.level.isDay() && entityvillagertrader.isInvisible(); // Paper - Add more WanderingTrader API // Purpur
         }));
         this.goalSelector.addGoal(1, new TradeWithPlayerGoal(this));
+        // KioCG start
+        /*
         this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Zombie.class, 8.0F, 0.5D, 0.5D));
         this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Evoker.class, 12.0F, 0.5D, 0.5D));
         this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Vindicator.class, 8.0F, 0.5D, 0.5D));
@@ -123,6 +125,8 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
         this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Pillager.class, 15.0F, 0.5D, 0.5D));
         this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Illusioner.class, 12.0F, 0.5D, 0.5D));
         this.goalSelector.addGoal(1, new AvoidEntityGoal<>(this, Zoglin.class, 10.0F, 0.5D, 0.5D));
+        */
+        // KioCG end
         this.goalSelector.addGoal(1, new PanicGoal(this, 0.5D));
         this.goalSelector.addGoal(1, new LookAtTradingPlayerGoal(this));
         this.goalSelector.addGoal(2, new WanderingTrader.WanderToPositionGoal(this, 2.0D, 0.35D));
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index ee64ddb0da23ea1e54d0295324aca5b46a438111..29f4a46ecca0e2bd6312fb7fd30117ccd1d94916 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -207,14 +207,14 @@ public class ActivationRange
             if (!player.level.purpurConfig.idleTimeoutTickNearbyEntities && player.isAfk()) continue; // Purpur
             // Paper start
             int worldHeight = world.getHeight();
-            ActivationRange.maxBB = player.getBoundingBox().inflate( maxRange, worldHeight, maxRange );
-            ActivationType.MISC.boundingBox = player.getBoundingBox().inflate( miscActivationRange, worldHeight, miscActivationRange );
-            ActivationType.RAIDER.boundingBox = player.getBoundingBox().inflate( raiderActivationRange, worldHeight, raiderActivationRange );
-            ActivationType.ANIMAL.boundingBox = player.getBoundingBox().inflate( animalActivationRange, worldHeight, animalActivationRange );
-            ActivationType.MONSTER.boundingBox = player.getBoundingBox().inflate( monsterActivationRange, worldHeight, monsterActivationRange );
-            ActivationType.WATER.boundingBox = player.getBoundingBox().inflate( waterActivationRange, worldHeight, waterActivationRange );
-            ActivationType.FLYING_MONSTER.boundingBox = player.getBoundingBox().inflate( flyingActivationRange, worldHeight, flyingActivationRange );
-            ActivationType.VILLAGER.boundingBox = player.getBoundingBox().inflate( villagerActivationRange, worldHeight, villagerActivationRange );
+            ActivationRange.maxBB = player.getBoundingBox().inflate( maxRange, Math.max(16, maxRange), maxRange ); // KioCG - 减少搜索范围
+            ActivationType.MISC.boundingBox = player.getBoundingBox().inflate( miscActivationRange, Math.max(16, miscActivationRange), miscActivationRange ); // KioCG - 减少搜索范围
+            ActivationType.RAIDER.boundingBox = player.getBoundingBox().inflate( raiderActivationRange, Math.max(16, raiderActivationRange), raiderActivationRange ); // KioCG - 减少搜索范围
+            ActivationType.ANIMAL.boundingBox = player.getBoundingBox().inflate( animalActivationRange, Math.max(16, animalActivationRange), animalActivationRange ); // KioCG - 减少搜索范围
+            ActivationType.MONSTER.boundingBox = player.getBoundingBox().inflate( monsterActivationRange, Math.max(16, monsterActivationRange), monsterActivationRange ); // KioCG - 减少搜索范围
+            ActivationType.WATER.boundingBox = player.getBoundingBox().inflate( waterActivationRange, Math.max(16, waterActivationRange), waterActivationRange ); // KioCG - 减少搜索范围
+            ActivationType.FLYING_MONSTER.boundingBox = player.getBoundingBox().inflate( flyingActivationRange, Math.max(16, flyingActivationRange), flyingActivationRange ); // KioCG - 减少搜索范围
+            ActivationType.VILLAGER.boundingBox = player.getBoundingBox().inflate( villagerActivationRange, Math.max(16, villagerActivationRange), villagerActivationRange ); // KioCG - 减少搜索范围
             // Paper end
 
             // Paper start
@@ -298,6 +298,7 @@ public class ActivationRange
             return 100; // Paper
         }
         // Paper start
+        if (!(entity instanceof LivingEntity)) // KioCG - Check items only. https://github.com/PaperMC/Paper/pull/7644 // KioCG Arrow out of sync?
         if ( !entity.isOnGround() || entity.getDeltaMovement().horizontalDistanceSqr() > 9.999999747378752E-6D )
         {
             return 100;
@@ -307,6 +308,11 @@ public class ActivationRange
         {
             if ( (!entity.isOnGround() && !(entity instanceof FlyingMob)) ) // Paper - remove passengers logic
             {
+                // KioCG start
+                if (!(entity instanceof WaterAnimal) && !(entity instanceof net.minecraft.world.entity.animal.axolotl.Axolotl) && !(entity instanceof net.minecraft.world.entity.animal.Turtle)
+                    && !(entity instanceof net.minecraft.world.entity.animal.FlyingAnimal) && !(entity instanceof net.minecraft.world.entity.animal.allay.Allay)
+                    && !(entity instanceof net.minecraft.world.entity.ambient.Bat))
+                // KioCG end
                 return 10; // Paper
             }
         } else if ( !( (AbstractArrow) entity ).inGround )
